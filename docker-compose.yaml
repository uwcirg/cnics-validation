version: "3.8"

services:
  # keycloak:
  #   image: quay.io/keycloak/keycloak:22.0
  #   container_name: keycloak
  #   command: ["start-dev"]
  #   environment:
  #     KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
  #     KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
  #     KEYCLOAK_IMPORT: ${KEYCLOAK_IMPORT:-/opt/keycloak/data/import/example-realm.json}
  #   ports:
  #     - "8080:8080"
  #   volumes:
  #     - ./keycloak/realm:/opt/keycloak/data/import
  #   networks:
  #     - internal

  mariadb:
    image: mariadb:10.11
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: Satinder.06
      MYSQL_DATABASE: cnics_mci
      MYSQL_USER: root
    volumes:
      - mariadb-data:/var/lib/mysql
      - logs-data:/var/log/mysql
    networks:
      - internal

  # postgres:
  #   image: postgres:${POSTGRES_IMAGE_TAG:-12}
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_DB: app_db
  #     POSTGRES_USER: app_user
  #     POSTGRES_PASSWORD: secret
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #     - logs-data:/var/log/postgresql
  #     - ./logs/logserver/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
  #   networks:
  #     - internal

  # postgrest:
  #   image: postgrest/postgrest
  #   restart: unless-stopped
  #   environment:
  #     PGRST_DB_URI: postgres://app_user:secret@postgres:5432/app_db
  #     PGRST_DB_SCHEMA: api
  #     PGRST_DB_ANON_ROLE: web_anon
  #     PGRST_JWT_SECRET: ${PGRST_JWT_SECRET}
  #   depends_on:
  #     - postgres
  #   volumes:
  #     - logs-data:/var/log/postgrest
  #   networks:
  #     internal:
  #       aliases:
  #         - postgrest-internal
  #     ingress:

  web:
    image: php:8.1-apache
    volumes:
      - .:/var/www/html:ro
    environment:
      LOG_SERVER_URL: http://postgrest-internal:3000/events
      DB_HOST: mariadb
      DB_USER: root
      DB_PASSWORD: example
      DB_NAME: mci
    logging:
      driver: "json-file"
    depends_on:
      - mariadb
      - postgrest
    networks:
      - internal

  auth-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.3.0
    expose:
      - 4180
    environment:
      OAUTH2_PROXY_CLIENT_ID: logs_oauth2_proxy
      OAUTH2_PROXY_HTTP_ADDRESS: 0.0.0.0:4180
      OAUTH2_PROXY_REVERSE_PROXY: "true"
      OAUTH2_PROXY_UPSTREAMS: static://202
      OAUTH2_PROXY_SET_XAUTHREQUEST: "true"
      OAUTH2_PROXY_COOKIE_SECRET: ${OAUTH2_PROXY_COOKIE_SECRET}
      OAUTH2_PROXY_COOKIE_DOMAINS: .${BASE_DOMAIN}
      OAUTH2_PROXY_WHITELIST_DOMAINS: .${BASE_DOMAIN}
      OAUTH2_PROXY_COOKIE_EXPIRE: 30m
      OAUTH2_PROXY_COOKIE_REFRESH: 1m
      OAUTH2_PROXY_EMAIL_DOMAINS: "*"
      OAUTH2_PROXY_INSECURE_OIDC_ALLOW_UNVERIFIED_EMAIL: "true"
      OAUTH2_PROXY_OIDC_ISSUER_URL: https://keycloak.${BASE_DOMAIN}/realms/ltt
      OAUTH2_PROXY_USER_ID_CLAIM: preferred_username
      OAUTH2_PROXY_PROVIDER: oidc
      OAUTH2_PROXY_SCOPE: openid profile email
      OAUTH2_PROXY_CLIENT_SECRET: ${OAUTH2_PROXY_CLIENT_SECRET}
    labels:
      - traefik.enable=true
      - traefik.http.routers.auth-proxy.rule=Host(`auth-proxy.${BASE_DOMAIN}`)
      - traefik.http.routers.auth-proxy.entrypoints=websecure
      - traefik.http.routers.auth-proxy.tls.certresolver=letsencrypt
      - traefik.http.middlewares.oidc-auth.forwardAuth.address=http://auth-proxy:4180/
      - traefik.http.middlewares.oidc-auth.forwardAuth.trustForwardHeader=true
      - traefik.http.middlewares.oidc-auth.forwardAuth.authResponseHeaders=X-Auth-Request-User,X-Auth-Request-Email,X-Auth-Request-Access-Token,Authorization
    networks:
      - internal
      - ingress

volumes:
  postgres-data:
  logs-data:
  mariadb-data:

networks:
  internal:
  ingress:
    external: true
