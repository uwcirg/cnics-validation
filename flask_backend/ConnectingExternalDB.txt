📘 SQLAlchemy Guide: Connecting to an External Database
🧰 Requirements
Make sure you have:

Python installed

sqlalchemy installed:

bash
Copy
pip install sqlalchemy
The correct database driver installed:

MySQL/MariaDB: mysql-connector-python or pymysql

bash
Copy
pip install mysql-connector-python
PostgreSQL: psycopg2-binary

SQLite: built-in

🔐 1. Connection String Format
SQLAlchemy uses a connection URL to access databases.

General Format:
bash
Copy
dialect+driver://username:password@host:port/database
✅ Examples:
MariaDB/MySQL (external server):

python
Copy
"mysql+mysqlconnector://root:example@192.168.1.50:3306/external_db"
PostgreSQL:

python
Copy
"postgresql+psycopg2://user:pass@host:5432/dbname"
🏗️ 2. Creating a Connection Engine
python
Copy
from sqlalchemy import create_engine

external_url = "mysql+mysqlconnector://root:example@192.168.1.50:3306/external_db"
external_engine = create_engine(external_url, echo=True)
echo=True prints all SQL generated (good for debugging).

You can add pool_pre_ping=True to prevent stale connections.

🔁 3. Creating a Session for ORM
python
Copy
from sqlalchemy.orm import sessionmaker

ExternalSession = sessionmaker(bind=external_engine)
external_session = ExternalSession()
Use this session to query or modify the external DB.

🧱 4. Define Models for the External DB
Use a separate Base class to avoid metadata conflicts:

python
Copy
from sqlalchemy.orm import declarative_base, Mapped, mapped_column
from sqlalchemy import Integer, String

ExternalBase = declarative_base()

class ExternalUser(ExternalBase):
    __tablename__ = "users"
    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    name: Mapped[str] = mapped_column(String(50))
🔍 5. Query Data from External DB
python
Copy
users = external_session.query(ExternalUser).all()
for user in users:
    print(user.id, user.name)
Don't forget to close the session after use:

python
Copy
external_session.close()
📄 6. Reflect Existing External Schema (Optional)
If you don’t want to manually define models:

python
Copy
from sqlalchemy import MetaData, Table

metadata = MetaData()
metadata.reflect(bind=external_engine)

external_users = Table("users", metadata, autoload_with=external_engine)

with external_engine.connect() as conn:
    result = conn.execute(external_users.select()).fetchall()
    for row in result:
        print(row)
⚠️ 7. Multiple Databases in One App
If your app uses multiple databases, keep models, sessions, and metadata separate:

python
Copy
# db1_base.py
Base1 = declarative_base()

# db2_base.py
Base2 = declarative_base()

# session1 = sessionmaker(bind=engine1)
# session2 = sessionmaker(bind=engine2)
Avoid joining across databases unless supported by your DBMS.

✅ 8. Best Practices
Use environment variables to store database credentials securely.

Always close sessions after use.

Keep external models isolated from your main app models.

Consider read-only views or materialized tables for external joins.

Use Docker Compose to simulate external DBs locally if needed.

🧪 9. Example Folder Structure
pgsql
Copy
my_project/
├── models/
│   ├── main_models.py
│   └── external_models.py
├── db/
│   ├── main.py         # main engine/session
│   └── external.py     # external engine/session
├── .env
└── main.py
🧠 Bonus: Using .env for Config
python
Copy
from dotenv import load_dotenv
import os

load_dotenv()
url = os.getenv("EXTERNAL_DB_URL")
engine = create_engine(url)
.env file:

bash
Copy
EXTERNAL_DB_URL=mysql+mysqlconnector://user:pass@host:3306/db